#include <iostream>

#define MAXINT 100000000
#define N 5

using namespace std;

int main() {
    int graph[N][N] = {
        {0, 9, 75, 0, 0},
        {9, 0, 95, 19, 42},
        {75, 95, 0, 51, 66},
        {0, 19, 51, 0, 31},
        {0, 42, 66, 31, 0}
    };
    
    int numberOfEdge = 0;  // количество ребер

    int selected[N];    // список выбранных вершин
    for(int i = 0; i < N; i++) selected[i] = 0;
    
    selected[0] = 1;

    int x,y;
    
    cout << "Ребра, вошедшие в остав: " <<  endl;
    
    // количество ребер в минимальном оставе всегда будет меньше чем N-1, 
    // если N - количество вершин в графе
    while (numberOfEdge < N-1){
        
        int min = MAXINT;
        x = 0;
        y = 0;

        for (int i = 0; i < N; i++) {                       // идем по всем вершинам
            if (selected[i] == 1) {                         // если выбрали вершину
                
                for (int j = 0; j < N; j++) {               // ищем такую вершину среди остальных,
                    
                    if (!selected[j] && graph[i][j] != 0) {  // которая еще не выбрана
                        if (graph[i][j] < min) {             // и ребро с этой вершиной миниимально среди оставшихся ребер
                            min = graph[i][j];               // запоминаем вес минимального ребра
                            x = i;                          // запоминаем вершины этого ребра 
                            y = j;                      
                        }
                    }
                }
            }
        }
        
        // выводим добавленное в остав ребро
        cout << x << " - " << y << " : " << graph[x][y] << endl;
        selected[y] = true;                                 // помечаем только что добавленную вершину как выбранную
        numberOfEdge++;
    }

  return 0;
}